/* server.c - code for example server program that uses TCP */

#include <sys/types.h> 
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
//#define FD_SETSIZE  64

#define QLEN 6 /* size of request queue */
int visits = 0; /* counts client connections */

/*------------------------------------------------------------------------
* Program: server
*
* Purpose: allocate a socket and then repeatedly execute the following:
* (1) wait for the next connection from a client
* (2) send a short message to the client
* (3) close the connection
* (4) go back to step (1)
*
* Syntax: server [ port ]
*
* port - protocol port number to use
*
* Note: The port argument is optional. If no port is specified,
* the server uses the default given by PROTOPORT.
*
*------------------------------------------------------------------------
*/

int main(int argc, char **argv) {
	struct protoent *ptrp; /* pointer to a protocol table entry */
	struct sockaddr_in sad0; /* structure to hold server's address for observers*/
	struct sockaddr_in sad; /* structure to hold server's address for partcipants */
	struct sockaddr_in cad; /* structure to hold client's address */
	int sd, sd2, sd3, sd4; /* socket descriptors */
	int p_port; /* protocol port number for participants */
	int o_port; /* protocol port number for oberservers*/
	int alen; /* length of address */
	char buf[1000];	 /* buffer for string the server sends */
	char rbuf[1000];  /* buffer for string the server sends */
	fd_set p; /* fd_sets for partcipants and observers */
	fd_set o;
	int i;
	int j;
	int o_clients[64];
	int p_clients[64];
	int ready_sd;
	int newP_sock;
	int newO_sock;
	int n;
	struct timeval timeout;
	timeout.tv_sec = 2;
	if( argc != 3 ) {
		fprintf(stderr,"Error: Wrong number of arguments\n");
		fprintf(stderr,"usage:\n");
		fprintf(stderr,"./server server_port-partcipants server_port-observers\n");
		exit(EXIT_FAILURE);
	}
	
	
	for(i = 0; i<=63; i++){
		o_clients[i] = 0;
	}	
	
	for(i = 0; i<=63; i++){
		p_clients[i] = 0;
	}	
	
	
	
	
	
	memset((char *)&sad,0,sizeof(sad)); /* clear sockaddr structure */
	memset((char *)&sad0,0,sizeof(sad0)); /* clear sockaddr structure */
	sad.sin_family = AF_INET; /* set family to Internet */
	sad0.sin_family = AF_INET; /* set family to Internet */
	sad.sin_addr.s_addr = INADDR_ANY; /* set the local IP address */
	sad0.sin_addr.s_addr = INADDR_ANY; /* set the local IP address */

	p_port = atoi(argv[1]); /* convert argument to binary */
	o_port = atoi(argv[2]); /* convert argument to binary */
	if (p_port > 0) { /* test for illegal value */
		sad.sin_port = htons((u_short)p_port);
	} else { /* print error message and exit */
		fprintf(stderr,"Error: Bad port number %s\n",argv[1]);
		exit(EXIT_FAILURE);
	}

	if (o_port > 0) { /* test for illegal value */
		sad0.sin_port = htons((u_short)o_port);
	} else { /* print error message and exit */
		fprintf(stderr,"Error: Bad port number %s\n",argv[2]);
		exit(EXIT_FAILURE);
	}



	/* Map TCP transport protocol name to protocol number */
	if ( ((long int)(ptrp = getprotobyname("tcp"))) == 0) {
		fprintf(stderr, "Error: Cannot map \"tcp\" to protocol number");
		exit(EXIT_FAILURE);
	}

	/* Create a socket */
	sd = socket(PF_INET, SOCK_STREAM, ptrp->p_proto);
	if (sd < 0) {
		fprintf(stderr, "Error: Socket creation failed\n");
		exit(EXIT_FAILURE);
	}

	sd2 = socket(PF_INET, SOCK_STREAM, ptrp->p_proto);
	if (sd2 < 0) {
		fprintf(stderr, "Error: Socket creation failed\n");
		exit(EXIT_FAILURE);
	}

	/* Bind a local address to the socket */
	if (bind(sd, (struct sockaddr *)&sad, sizeof(sad)) < 0) { // socket for partcipant
		fprintf(stderr,"Error: Bind failed\n");
		exit(EXIT_FAILURE);
	}
	
	if (bind(sd2, (struct sockaddr *)&sad0, sizeof(sad0)) < 0) { // socket for oberserver
		fprintf(stderr,"Error: Bind failed0\n");
		exit(EXIT_FAILURE);
	}

	/* Specify size of request queue */
	if (listen(sd, QLEN) < 0) {
		fprintf(stderr,"Error: Listen failed\n");
		exit(EXIT_FAILURE);
	}
	
	if (listen(sd2, QLEN) < 0) {
		fprintf(stderr,"Error: Listen failed\n");
		exit(EXIT_FAILURE);
	}

	FD_ZERO(&p);
	FD_ZERO(&o);
	FD_SET(sd, &p);
	FD_SET(sd2, &o);

	/* Main server loop - accept and handle requests */
	while (1) {
		alen = sizeof(cad);
		
		ready_sd = select(64 , &p , NULL , NULL , NULL);
		
		if((FD_ISSET(sd, &p) != 0)){
			if ( (newP_sock =accept(sd, (struct sockaddr *)&cad, &alen)) < 0) {
				fprintf(stderr, "Error: Accept failed\n");
				exit(EXIT_FAILURE);
			}
		}
		


		for(i = 0; i<=63; i++){
			if(p_clients[i] == 0){
				p_clients[i] = newP_sock;
				break;
			}
		}
		if(i == 64){
			close(newP_sock);
		}					
		else{
			printf("fuck\n");
			printf("  %d  \n",i);
			printf("  %d value of pclients[i] \n",p_clients[i]);
			FD_SET(p_clients[i], &p);
			for(j = 0; j<=63; j++){
				if(o_clients[j] != 0){
					printf("efg\n");
					sprintf(buf,"User %d has joined\n",i);      //FIGURE OUT HOW TO DO THIS (Send message to observers)
					send(o_clients[j],buf,strlen(buf),0);
				}	
			}
		}
		
		/*for(i = 0; i<=63; i++){
			n = recv(p_clients[i], rbuf, sizeof(rbuf), 0);
			if(n != 0){
				read(p_clients[i],rbuf,sizeof(buf));
				for(j = 0; j<=63; j++){
					if(o_clients[j] != 0){
						printf("recieved messeage \n");
						//sprintf(buf,"A new observer has joined\n");      //FIGURE OUT HOW TO DO THIS (Send message to observers)
						send(o_clients[j],rbuf,strlen(rbuf),0);
					}				
				}		
			}
		}*/
			
			
		n = recv(sd2, rbuf, sizeof(rbuf), 0);
		for(j = 0; j<=63; j++){
			if(o_clients[j] != 0){
				printf("recieved messeage \n");
				//sprintf(buf,"A new observer has joined\n");      //FIGURE OUT HOW TO DO THIS (Send message to observers)
				send(o_clients[j],rbuf,strlen(rbuf),0);
			}	
		}
		
		
		ready_sd = select(64 , &o , NULL , NULL , NULL);
		
		if((FD_ISSET(sd2, &o) != 0)){
			if ( (newO_sock =accept(sd2, (struct sockaddr *)&cad, &alen)) < 0) {
				fprintf(stderr, "Error: Accept failed\n");
				exit(EXIT_FAILURE);
			}
		}
		
		for(i = 0; i<=63; i++){
			if(o_clients[i] == 0){
				o_clients[i] = newO_sock;
				break;
			}
		}
		if(i == 64){
			close(newO_sock);
		}				
		else{
			printf("  %d  \n",i);
			printf("  %d value of oclients[i] \n",o_clients[i]);	
			FD_SET(o_clients[i], &o);
			for(j = 0; j<=63; j++){
				if(o_clients[j] != 0){
					printf("abcd\n");
					sprintf(buf,"A new observer has joined\n");      //FIGURE OUT HOW TO DO THIS (Send message to observers)
					send(o_clients[j],buf,strlen(buf),0);
				}	
			}
		}	

		
		
		
		
		
		
		
		
		
		
		
		
		
		/*sd4 = 0;
		FD_SET(0, &o);
		printf("added observer\n");
		int addO = FD_ISSET(0, &o);
		sprintf(buf,"This server has been contacted %d time%s\n",visits,visits==1?".":"s.");
				
		if(addO != 0){
			printf("added O\n");
		}
		else{
			printf("not added   O\n");
		}*/	
		
		
		/*visits++;
		send(sd3,buf,strlen(buf),0);
		close(sd3);
		sprintf(buf,"This server has been contacted %d time%s\n",visits,visits==1?".":"s.");
		send(sd4,buf,strlen(buf),0);
		close(sd4);*/
	}
}

